= Build Plugin for Components to Install Anywhere
:source-highlighter: prettify
:blank: pass:[ +]
:latestRevision: 1.0.0
:icons: font
:toc:

image:https://travis-ci.org/IntershopCommunicationsAG/component-build-plugin.svg?branch=master["Build Status", link="https://travis-ci.org/IntershopCommunicationsAG/component-build-plugin"]
image:https://api.codacy.com/project/badge/Grade/9d88a63723864ca7bd77e9c05e8d1e48["Codacy code quality", link="https://www.codacy.com/app/IntershopCommunicationsAG/component-build-plugin?utm_source=github.com&utm_medium=referral&utm_content=IntershopCommunicationsAG/component-build-plugin&utm_campaign=Badge_Grade"]

NOTE: This library requires Gradle 4 and JDK 8

NOTE: This library is under development and not final released.

== Summary
This plugin generates a component descriptor, that can be used for deployments on any platforms. It is possible to
add modules (eg Intershop Cartridges), libraries, zip files (container), single files and properties for different
installation and environemnt types and operating systems (classifier). The configuration contains also the installation
target.
There is also an installation plugin, that used the descriptor for an installation.

== Usage
To apply the component-build Gradle plugin to your projects, add the following in your build script:

[source,groovy]
[subs=+attributes]
.build.gradle
----
plugins {
    id 'com.intershop.gradle.component.build' version '{latestRevision}'
}

component {
    // component configuration
}
----

== Tasks

[cols="25%,30%,45%", width="100%", options="header"]
|===
|Task name                   | Type                 | Description

|zipContainer<name> | ZipContainerTask     | These tasks create zip container from configured sources.
|verifyClasspath              | VerifyClasspathTask  | For all configured jar files the classpath will be verified for duplicated classes by this task.
|createComponent              | CreateComponentTask  | The main task creates the descriptor file.
|===

The package name of all tasks is `com.intershop.gradle.component.build.tasks`.

The parameter `--recreate` enable the rebuild of `verifyClasspath` and `createComponent` without considering incremental configuration.

== Project Extension 'component'

=== Properties of 'component'

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

| <<ivyPublicationName,ivyPublicationName>>     | This property value is used for the name of the used ivy publication.
| <<mavenPublicationName,mavenPublicationName>> | This property value is used for the name of the used maven publication.
| <<displayName,displayName>>                   | The display name is visible for the installation client.
| <<componentDescription,componentDescription>> | This is a more detailed description of this component.
| <<targetPath,targetPath>>                     | The default target path of the configured component.
| <<descriptorPath,descriptorPath>>             | The path for the directory with the component descriptor.
| <<decriptorOutputFile,decriptorOutputFile>>   | The configuration of the output file of createComponent.
| <<types,types>>                               | This is a list of deployment and environement types of the component. (*read only*)
| <<excludes,excludes>>                         | Files that matches to one of patterns will be excluded from the update installation.
| <<preserve,preserve>>                         | Pattern set to preserve files during an update installation.
| <<libs,libs>>                                 | This is the data container for all libraries. (*read only*)
| <<modules,modules>>                           | This configuration contains all libraries. (*read only*)
| <<dependencyMngt,dependencyMngt>>             | This container holds all dependency related configuration parameters. (*read only*)
| <<fileItems,fileItems>>                       | This is the configuration of all single files. (*read only*)
| <<containers,containers>>                     | File containers can be configured in this configuration. (*read only*)
| <<links,links>>                               | Links can be configured in this configuration. (*read only*)
| <<directories,directories>>                   | Directories is a container for empty directories. (*read only*)
| <<propertyItems,propertyItems>>               | Properties can be configured in this container. (*read only*)
|===

[[ivyPublicationName]]
[source,groovy]
String ivyPublicationName

:::
This property value is used for the name of the used ivy publication.
Default:: `ivyIntershop`

***
[[mavenPublicationName]]
[source,groovy]
String mavenPublicationName

:::
This property value is used for the name of the used maven publication.
Default:: `mvnIntershop`

***
[[displayName]]
[source,groovy]
String displayName

:::
The display name is visible for the installation client.
Default:: `*project.name*`

***
[[componentDescription]]
[source,groovy]
String componentDescription

:::
This is a more detailed description of this component.
Default:: `""`

***
[[descriptorPath]]
[source,groovy]
String descriptorPath

:::
This is the path of the directory for the descriptor file.
Default:: `component`

***
[[targetPath]]
[source,groovy]
String targetPath

:::
The default target path of the configured component.
Default:: `""`

***
[[decriptorOutputFile]]
[source,groovy]
File decriptorOutputFile

:::
The configuration of the output file of createComponent.
Default:: `*project.buildDir*/componentBuild/descriptor/file.component`

***
[[types]]
[source,groovy]
Set<String> types

:::
This is a list of deployment and environement types of the component. (*read only*)
Default:: `[]`

***
[[excludes]]
[source,groovy]
Set<String> excludes

:::
Files that matches to one of the patterns will be excluded from the update installation. (*read only*)
Default:: `[]`

***
[[preserve]]
[source,groovy]
PatternFilterable preserve

:::
Pattern set to preserve files during an update installation (*read only*)
Default:: `PaternFilterable` without a configuration

Example::
[source,groovy]
    preserve {
        include 'extraDir/**'
        include 'dir1/**'
        exclude 'dir1/extra.txt'
    }

***
[[libs]]
[source,groovy]
LibraryItemContainer libs

:::
This is the data container for all libraries (*read only*). See <<LibraryItemContainer, `LibraryItemContainer`>>.

***
[[modules]]
[source,groovy]
ModuleItemContainer modules

:::
This configuration contains all libraries (*read only*). See <<ModuleItemContainer, `ModuleItemContainer`>>.

***
[[dependencyMngt]]
[source,groovy]
DependencyMngtContainer dependencyMngt

:::
This container holds all dependency related configuration parameters (*read only*). See <<DependencyMngtContainer, `DependencyMngtContainer`>>.

***
[[fileItems]]
[source,groovy]
FileItemContainer fileItems

:::
This is the configuration of all single files (*read only*). See <<FileItemContainer, `FileItemContainer`>>.

***
[[containers]]
[source,groovy]
FileContainerItemContainer containers

:::
File containers can be configured in this configuration (*read only*). See <<FileContainerItemContainer, `FileContainerItemContainer`>>.

***

[[links]]
[source,groovy]
LinkItemContainer links

:::
This is a container for link configurations (*read only*). See <<LinkItemContainer, `LinkItemContainer`>>.

***
[[directories]]
[source,groovy]
DirectoryContainer directories

:::
Directories are configuration of empty folders (*read only*). See <<DirectoryContainer, `DirectoryContainer`>>.

***
[[propertyItems]]
[source,groovy]
PropertyItemContainer propertyItems

:::
Properties can be configured in this container (*read only*). See <<PropertyItemContainer, `PropertyItemContainer`>>.

***

=== Methods of 'component'

[cols="1m,1d" width="100%", options="header"]
|===
|Method                                     | Description

|<<addType,addType>>(type)                  | Add a deployment or environment type to the list of types. The method returns false, if the new type is already a member of the list.
|<<addTypes,addTypes>>(types)               | Add a collection of deployment or environment types to the list of types. The method returns false, if the one of the list is already a member of the list.
|<<scexclude,exclude>>(pattern)             | Adds a pattern to the set of exclude patterns. Files that matches to one of patterns will be excluded from the update installation.
|<<maexclude,exclude>>(patterns)            | Adds a set of patterns to the set of exclude patterns. Files that matches to one of patterns will be excluded from the update installation.
|<<apreserve,preserve>>(action)             | Configures the patternset with an action. Files that matches to one of patterns will be preserved during the update installation.
|<<cpreserve,preserve>>(closure)            | Configures the patternset with a closure. Files that matches to one of patterns will be preserved during the update installation.
|<<mlibs,libs>>(action)                     | Initializes container for library configuration.
|<<mmodules,modules>>(action)               | Initializes container for modul configuration.
|<<mdependencyMngt,dependencyMngt>>(action) | Initializes container for dependency management container. This includes also the configuration for the class collision verification.
|<<mfileItems,fileItems>>(action)           | Initializes container for single files.
|<<mcontainers,containers>>(action)         | Initializes container for additional file item containers.
|<<mlinks,links>>(action)                   | Initializes container for link configurations.
|<<mdirectories,directories>>(action)       | Initializes container for directories.
|<<mpropertyItems,propertyItems>>(action)   | Initializes container for properties.
|===

[[addType]]
[source,groovy]
boolean addType(String type)

:::
Add a deployment or environment type to the list of types. The method returns false, if the new type is already a member of the list.

***
[[addTypes]]
[source,groovy]
boolean addTypes(Collection<String> types)

:::
Add a collection of deployment or environment types to the list of types. The method returns false, if the one of the list is already a member of the list.

***
[[scexclude]]
[source,groovy]
exclude(String pattern)

:::
Adds a pattern to the set of exclude patterns. Files that matches to one of the patterns will be excluded from the update installation.

***
[[maexclude]]
[source,groovy]
exclude(Set<String> patterns)

:::
Adds a set of patterns to the set of exclude patterns. Files that matches to one of the patterns will be excluded from the update installation.

***
[[apreserve]][[cpreserve]]
[source,groovy]
preserve(Action<? super PatternFilterable> action)
preserve(Closure closure)

:::
Configures the patternset with an action or closure - depends on the script language. Files that matches to one of patterns will be preserved during the update installation.

Example::
[source,groovy]
    preserve {
        include 'extraDir/**'
        include 'dir1/**'
        exclude 'dir1/extra.txt'
    }

***
[[mapreserve]]
[source,groovy]
preserve(Set<String> patterns)

:::
Adds a set of patterns to the set of preserve patterns. Files that matches to one of the patterns will be preserved during the update installation.

***
[[mlibs]]
[source,groovy]
libs(Action<? super LibraryItemContainer> action)

:::
Initializes container for library configuration. Instead of an action it is also possible to use a closure. See <<LibraryItemContainer, `LibraryItemContainer`>>.

***
[[mmodules]]
[source,groovy]
modules(Action<? super ModuleItemContainer> action)

:::
Initializes container for modul configuration. Instead of an action it is also possible to use a closure. See <<ModuleItemContainer, `ModuleItemContainer`>>.

***
[[mdependencyMngt]]
[source,groovy]
dependencyMngt(Action<? super DependencyMngtContainer> action)

:::
Initializes container for dependency management container. This includes also the configuration for the class collision verification.
Instead of an action it is also possible to use a closure. See <<DependencyMngtContainer, `DependencyMngtContainer`>>.

***
[[mfileItems]]
[source,groovy]
fileItems(Action<? super FileItemContainer> action)

:::
Initializes container for single files. Instead of an action it is also possible to use a closure. See <<FileItemContainer, `FileItemContainer`>>.

***
[[mcontainers]]
[source,groovy]
containers(Action<? super FileContainerItemContainer> action)

:::
Initializes container for additional file item containers. Instead of an action it is also possible to use a closure. See <<FileContainerItemContainer, `FileContainerItemContainer`>>.

***
[[mlinks]]
[source,groovy]
links(Action<? super LinkItemContainer> action)

:::
Initializes container for link configurations. See <<LinkItemContainer, `LinkItemContainer`>>.

***
[[mdirectories]]
[source,groovy]
directories(Action<? super DirectoryContainer> action)

:::
Initializes directory configuration container. See <<DirectoryContainer, `DirectoryContainer`>>.

***
[[mpropertyItems]]
[source,groovy]
properties(Action<? super PropertyItemContainer> action)

:::
Initialize container for properties. Instead of an action it is also possible to use a closure. See <<PropertyItemContainer, `PropertyItemContainer`>>.

***

=== Configuration for libs, modules, fileitems, links, directories and file container

[[itemproperties]]
==== Properties of containers and items

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<contentType,contentType>> | This setting specifies the handling of the folder / files.
|<<types,types>>   | This is a list of deployment and environement types of the component (*read only*). It is used for all items.
|===

[[contentType]]
[source,groovy]
String contentType

:::
This setting specifies the handling of the folder / files. +
The following values are allowed: +
  *IMMUTABLE* - statischer content will be replaced during the update +
  *DATA* - existing files can not be replaced by new files +
  *CONFIGURATION* - configuration files will be changed during the configuration +
  *UNSPECIFIED* - not specified content
Default:: `IMMUTABLE`

***
[[types]]
[source,groovy]
Set<String> types

:::
This is a list of deployment and environement types of the component (*read only*). It is used for all items.
Default:: `[]`
***

[[itemmethods]]
==== Methods of containers and items

[cols="1m,1d" width="100%", options="header"]
|===
|Method | Description

|<<setTypes,setTypes>>(types) | Set a collection of deployment or environment types to the list of types.
|<<addType,addType>>(type) | Add a deployment or environment type to the list of types. The method returns false, if the new type is already a member of the list.
|<<addTypes,addTypes>>(types) | Add a collection of deployment or environment types to the list of types. The method returns false, if the one of the list is already a member of the list.
|===

[[setTypes]]
[source,groovy]
void setTypes(Collection<String> types)

:::
Set a collection of deployment or environment types to the list of types.

***
[[addType]]
[source,groovy]
boolean addType(String type)

:::
Add a deployment or environment type to the list of types. The method returns false, if the new type is already a member of the list.

***
[[addTypes]]
[source,groovy]
boolean addTypes(Collection<String> types)

:::
Add a collection of deployment or environment types to the list of types. The method returns false, if the one of the list is already a member of the list.

***

[[LibraryItemContainer]]
=== Container 'libs'

This configuration contains the library configuration of a components. A library is a Maven dependency that includes one jar file.

==== Properties of 'libs'

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<libsitems,items>> | Set of all configured dependencies for library items.
|<<libsresolveTransitive,resolveTransitive>> | If this value is true, dependencies will be resolved transitive.
|<<libstargetPath,targetPath>> | A target path for all libraries.
|===

[[libsitems]]
[source,groovy]
Set<LibraryItem> items

:::
Set of all configured dependencies for library items. See <<LibraryItem,LibraryItem>>.
Default:: `[]`

***
[[libsresolveTransitive]]
[source,groovy]
boolean resolveTransitive

:::
If this value is true, dependencies will be resolved transitive.
Default:: `true`

***
[[libstargetPath]]
[source,groovy]
String targetPath

:::
A target path for all libraries.
Default:: `""`

***

==== Methods of 'libs'

[cols="1m,1d" width="100%", options="header"]
|===
|Method | Description

|<<libs1add,add>>(dependency, type, ...) | Creates an new instance of a library item with the dependency from the object and a list of types. It adds this item to the list and returns the instance for further configuration.
|<<libs2add,add>>(dependency) | Creates an new instance of a library item with the dependency from the object, adds this to the list and returns it for further configuration. Types of the container are used as a default configuration.
|<<libs3add,add>>(dependencies) | Creates new instances of library items from the object list with a types list from the container. All items a added to the list of items.
|<<libs4add,add>>(dependency,action) | Creates an new instance of a library item with the dependency from the object and configures this instance. The item is added to the list of items.
|===

[[libs1add]]
[source,groovy]
LibraryItem add(Object dependency, String... types)

:::
Creates a new instance of a library item with the dependency from the object and a list of types. It adds this item to the list and returns the instance for further configuration.
See <<LibraryItem,LibraryItem>>.

***
[[libs2add]]
[source,groovy]
LibraryItem add(Object dependency)

:::
Creates a new instance of a library item with the dependency from the object, adds this to the list and returns it for further configuration.
Types of the container are used as a default configuration. See <<LibraryItem,LibraryItem>>.

***
[[libs3add]]
[source,groovy]
void add(Collection<Object> dependencies)

:::
Creates new instances of library items from the object list with a types list from the container. All items a added to the list of items.

***
[[libs4add]]
[source,groovy]
void add(Object dependency, Action<? super LibraryItem> action)

:::
Creates a new instance of a library item with the dependency from the object and configures this instance. The item is added to the list of items.
Instead of an action it is also possible to use a closure. See <<LibraryItem,LibraryItem>>.

***

[[LibraryItem]]
==== Configuration of LibraryItem

===== Properties
See also <<itemproperties,'Properties of containers and items'>> and <<itemmethods, 'Methods of containers and items'>>..

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<libdependency,dependency>>        | The dependency configuration of this library.
|<<libresolveTransitive,resolveTransitive>> | If this value is true, the dependency will be resolved transitive.
|<<libtargetName,targetName>>      | The target name of this library artifact.
|===

[[libdependency]]
[source,groovy]
DependencyConfig dependency

:::
The dependency configuration of this library. See <<DependencyConfig,DependencyConfig>>.

***
[[libresolveTransitive]]
[source,groovy]
boolean resolveTransitive

:::
If this value is true, the dependency will be resolved transitive.
Default:: `true`

***
[[libtargetName]]
[source,groovy]
String targetName

:::
The target name of this library artifact.
Default:: `${dependency.group}_${dependency.module}_${dependency.version}`

***

[[ModuleItemContainer]]
=== Container 'modules'

This configuration contains the module configuration of a components. A module is an Ivy dependency that includes different files.
In future releases this will replaced and an own descriptor will be used.

==== Properties of 'modules'

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<modulesitems,items>> | Set of all configured dependencies for module items.
|<<modulesresolveTransitive,resolveTransitive>> | If this value is true, dependencies will be resolved transitive.
|<<modulestargetPath,targetPath>> | A target path for all modules.
|<<modulesupdatable,updatable>> | If an item should not be part of an update installation, this property is set to false.
This property is used for all items and can be overridden by a configuration of the item.
|<<modulesjarPath,jarPath>> | The target path for jar files of each module.
|<<modulesdescriptorPath,descriptorPath>> | The target path for descriptor files of each module.
|===

[[modulesitems]]
[source,groovy]
Set<ModuleItem> items

:::
Set of all configured dependencies for module items. See <<ModuleItem,ModuleItem>>.
Default:: `[]`

***
[[modulesresolveTransitive]]
[source,groovy]
boolean resolveTransitive

:::
If this value is true, dependencies will be resolved transitive.
Default:: `true`

***
[[modulestargetPath]]
[source,groovy]
String targetPath

:::
A target path for all modules.
Default:: `""`

***
[[modulesupdatable]]
[source,groovy]
boolean updatable

:::
If an item should not be part of an update installation, this property is set to false.
This property is used for all items and can be overridden by a configuration of the item.
Default:: `true`

***

[[modulesjarPath]]
[source,groovy]
String jarPath

:::
The target path for jar files of each module. It is used to preconfigure a module item. If this property is an empty
string, libs will be installed in the root directory of the module.

Default:: `libs`

***

[[modulesdescriptorPath]]
[source,groovy]
String descriptorPath

:::
The target path for descriptor files of each module. It is used to preconfigure a module item. If this property is an empty
string, descriptor files will be installed in the root directory of the module.
Default:: `""`

***

==== Methods of 'modules'

[cols="1m,1d" width="100%", options="header"]
|===
|Method | Description

|<<modules1add,add>>(dependency, type, ...) | Creates an new instance of a module item with the dependency from the object and a list of types. It adds this item to the list and returns the instance for further configuration.
|<<modules2add,add>>(dependency) | Creates an new instance of a library item with the dependency from the object, adds this to the list and returns it for further configuration. Types of the container are used as a default configuration.
|<<modules3add,add>>(dependencies) | Creates new instances of library items from the object list with a types list from the container. All items a added to the list of items.
|<<modules4add,add>>(dependency,action) | Creates an new instance of a module item with the dependency from the object and configures this instance. The item is added to the list of items.
|===

[[modules1add]]
[source,groovy]
ModuleItem add(Object dependency, String... types)

:::
Creates an new instance of a module item with the dependency from the object and a list of types. It adds this item to the list and returns the instance for further configuration.
See <<ModuleItem,ModuleItem>>.

***
[[modules2add]]
[source,groovy]
ModuleItem add(Object dependency)

:::
Creates an new instance of a library item with the dependency from the object, adds this to the list and returns it for further configuration.
Types of the container are used as a default configuration. See <<ModuleItem,ModuleItem>>.

***
[[modules3add]]
[source,groovy]
void add(Collection<Object> dependencies)

:::
Creates new instances of library items from the object list with a types list from the container. All items a added to the list of items.

***
[[modules4add]]
[source,groovy]
void add(Object dependency, Action<? super ModuleItem> action)

:::
Creates an new instance of a module item with the dependency from the object and configures this instance. The item is added to the list of items.
Instead of an action it is also possible to use a closure. See <<ModuleItem,ModuleItem>>.

***

[[ModuleItem]]
==== Configuration of ModuleItem

===== Properties
See also <<itemproperties,'Properties of containers and items'>>.

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<moduledependency,dependency>>        | The dependency configuration of this module.
|<<moduleresolveTransitive,resolveTransitive>> | If this value is true, the dependency will be resolved transitive.
|<<moduleitemType,itemType>> | This property can be used to add a special type description of a module.
|<<moduletargetPath,targetPath>>      | The target path of this module artifact. The default value is the module name.
|<<moduletargetIncluded,targetIncluded>> | If the configured target path is part of the component packages, it is necessary to set this property to true.
|<<moduleupdatable,updatable>> | If this item should not be part of an update installation, this property is set to false.
|<<moduleexcludes,excludes>>     | Files that matches to one of the patterns will be excluded from the update installation.
|<<modulepreserve,preserve>>     | Pattern set to preserve files during an update installation.
|<<modulejarPath,jarPath>>     | The target path for all jar files of this module.
|<<moduledescriptorPath,descriptorPath>>     | The target path for descriptor files of this module.
|===

[[moduledependency]]
[source,groovy]
DependencyConfig dependency

:::
The dependency configuration of this module. See <<DependencyConfig,DependencyConfig>>.

***
[[moduleresolveTransitive]]
[source,groovy]
boolean resolveTransitive

:::
If this value is true, the dependency will be resolved transitive.
Default:: `true`

***
[[moduleitemType]]
[source,groovy]
String itemType

:::
This property can be used to add a special type description of a module.
Default:: `""`

***
[[moduletargetPath]]
[source,groovy]
String targetPath

:::
The target path of this module artifact. The default value is the module name.
Default:: `dependency.module`

***
[[moduletargetIncluded]]
[source,groovy]
boolean targetIncluded

:::
If the configured target path is part of the component packages, it is necessary to set this property to true.
Default:: `false`

***
[[moduleupdatable]]
[source,groovy]
boolean updatable

:::
If this item should not be part of an update installation, this property is set to false.
Default:: `true`

***
[[moduleexcludes]]
[source,groovy]
Set<String> excludes

:::
Files that matches to one of the patterns will be excluded from the update installation. (*read only*)
Default:: `[]`

***
[[modulepreserve]]
[source,groovy]
PatternFilterable preserve

:::
Pattern set to preserve files during an update installation (*read only*)
Default:: `PaternFilterable` without a configuration

Example::
[source,groovy]
    preserve {
        include 'extraDir/**'
        include 'dir1/**'
        exclude 'dir1/extra.txt'
    }

***
[[modulejarPath]]
[source,groovy]
String jarPath

:::
The target path for jar files of this module. If this property is an empty
string, libs will be installed in the root directory of the module.

Default:: `libs`

***

[[moduledescriptorPath]]
[source,groovy]
String descriptorPath

:::
The target path for descriptor files of this module. If this property is an empty
string, descriptor files will be installed in the root directory of the module.
Default:: `""`

***

===== Methods
See also <<itemmethods, 'Methods of containers and items'>>.

[cols="1m,1d" width="100%", options="header"]
|===
|Method | Description

|<<smoduleaddUpdateExcludePattern,addUpdateExcludePattern>>(pattern) | Adds a pattern to the set of exclude patterns. Files that matches to one of patterns will be excluded from the update installation.
|<<mmoduleaddUpdateExcludePattern,addUpdateExcludePattern>>(patterns) | Adds a set of patterns to the set of exclude patterns. Files that matches to one of patterns will be excluded from the update installation.
|<<mapreserve,preserve>>(action) | Configures the patternset with an action. Files that matches to one of patterns will be preserved during the update installation.
|<<mcpreserve,preserve>>(closure) | Configures the patternset with a closure. Files that matches to one of patterns will be preserved during the update installation.

|===

[[smoduleaddUpdateExcludePattern]]
[source,groovy]
boolean addUpdateExcludePattern(String pattern)

:::
Adds a pattern to the set of exclude patterns. Files that matches to one of patterns will be excluded from the update installation.
If the pattern is part of the list, the methodreturns false.

***
[[mmoduleaddUpdateExcludePattern]]
[source,groovy]
boolean addUpdateExcludePattern(Set<String> patterns)

:::
Adds a set of patterns to the set of exclude patterns. Files that matches to one of patterns will be excluded from the update installation.
If one of the patterns is part of the list, the method returns false.

***
[[mapreserve]][[mcpreserve]]
[source,groovy]
preserve(Action<? super PatternFilterable> action)
preserve(Closure closure)

:::
Configures the patternset with an action or closure - depends on the script language. Files that matches to one of patterns will be preserved during the update installation.

Example::
[source,groovy]
    preserve {
        include 'extraDir/**'
        include 'dir1/**'
        exclude 'dir1/extra.txt'
    }

***

[[DependencyMngtContainer]]
=== Container 'dependencyMngt'

This configuration contains all dependency related configuration.

==== Properties of 'dependencyMngt'

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<dmexcludes,excludes>> | Set of excludes patterns, eg 'com.test' excludes all dependencies with com.test in groups.
|<<classpathVerification,classpathVerification>> | The configuration for classpath verification.
|===

[[dmexcludes]]
[source,groovy]
Set<DependencyConfig> excludes

:::
Set of excludes patterns, eg 'com.test' excludes all dependencies with com.test in groups. See <<DependencyConfig,DependencyConfig>>.
Default:: `[]`

***
[[classpathVerification]]
[source,groovy]
ClasspathVerificationContainer classpathVerification

:::
The configuration for classpath verification. See <<ClasspathVerificationContainer,ClasspathVerificationContainer>>

***

==== Methods of 'dependencyMngt'

[cols="1m,1d" width="100%", options="header"]
|===
|Method | Description

|<<dmexclude,exclude>>(group,module,version) | With this method it is possible to add an pattern with a group or organization, a name and a version.
It is possible to configure only a group and a name pattern or only a group pattern.
|<<classpathVerification,classpathVerification>>(action) | Initialize container for classpath verification (check for class collisions).
|===

[[dmexclude]]
[source,groovy]
void exclude(String group, String module, String version)

:::
With this method it is possible to add an pattern with a group or organization, a name and a version.
It is possible to configure only a group and a name pattern or only a group pattern. See See <<DependencyConfig,DependencyConfig>>.

***
[[classpathVerification]]
[source,groovy]
void classpathVerification(Action<? super ClasspathVerificationContainer> action)

:::
Initialize container for classpath verification (check for class collisions). Instead of an action it is also possible to use a closure.
See <<ClasspathVerificationContainer,ClasspathVerificationContainer>>

***

[[ClasspathVerificationContainer]]
==== Configuration of 'classpathVerification'

===== Properties

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<enabled,enabled>> | For disabling classpath verification set this property to false.
|<<cvexcludes,excludes>> | Set of excludes patterns, eg 'com.test' excludes all dependencies with com.test in groups from class path verification.
|<<excludedClasses,excludedClasses>> | Set of patterns to exclude special classes from verification.
|===

[[enabled]]
[source,groovy]
boolean enabled

:::
For disabling classpath verification set this property to false.
Default:: `true`

***
[[cvexcludes]]
[source,groovy]
Set<DependencyConfig> excludes

:::
Set of excludes patterns, eg 'com.test' excludes all dependencies with com.test in groups from class path verification. See <<DependencyConfig,DependencyConfig>>.
Default:: `[]`

***
[[excludedClasses]]
[source,groovy]
Set<String> excludedClasses

:::
Set of patterns to exclude special classes from verification.
Default:: `[]`

***

===== Methods

[cols="1m,1d" width="100%", options="header"]
|===
|Method | Description

|<<cvmexclude,exclude>>(group,module,version) | With this method it is possible to add an pattern with a group or organization, a name and a version.
It is possible to configure only a group and a name pattern or only a group pattern.
|<<excludeClass,excludeClass>>(classPattern) | Adds a pattern for classes, to remove these classes from verification.
|===

[[cvmexclude]]
[source,groovy]
void exclude(String group, String module, String version)

:::
With this method it is possible to add an pattern with a group or organization, a name and a version.
It is possible to configure only a group and a name pattern or only a group pattern.

***
[[excludeClass]]
[source,groovy]
void excludeClass(String classPattern)

:::
Adds a pattern for classes, to remove these classes from verification.

***

[[FileItemContainer]]
=== Container 'fileItems'

This is the configuration of single files.

==== Properties of 'fileItems'

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<filesitems,items>> | Set of all configured file items.
|<<filestargetPath,targetPath>> | A target path for all files.
|<<filesupdatable,updatable>> | If an item should not be part of an update installation, this property is set to true.
This property is used for all items and can be overridden by a configuration of the item.
|===

[[filesitems]]
[source,groovy]
Set<FileItem> items

:::
Set of all configured file items. See <<FileItem,FileItem>>.
Default:: `[]`

***
[[filestargetPath]]
[source,groovy]
String targetPath

:::
A target path for all files.
Default:: `""`

***
[[filesupdatable]]
[source,groovy]
boolean updatable

:::
If an item should not be part of an update installation, this property is set to false.
Default:: `true`

***

==== Methods of 'fileItems'

[cols="1m,1d" width="100%", options="header"]
|===
|Method | Description

|<<files1add,add>>(file, type, ...) | Creates an new instance of a file item with the real file and a list of types. It adds this item to the list and returns the instance for further configuration.
|<<files2add,add>>(file) | Creates an new instance of a file item with the real file, adds this to the list and returns it for further configuration. Types of the container are used as a default configuration.
|<<files3add,add>>(files) | Creates new instances of file items from the file list with a types list from the container. All items a added to the list of items.
|<<files4add,add>>(file,action) | Creates an new instance of a file item from the real file and configures this instance. The item is added to the list of items.
|===

[[files1add]]
[source,groovy]
FileItem add(File file, String... types)

:::
Creates an new instance of a file item with the real file and a list of types. It adds this item to the list and returns the instance for further configuration.
See <<FileItem,FileItem>>.

***
[[files2add]]
[source,groovy]
FileItem add(File file)

:::
Creates an new instance of a library item with the dependency from the object, adds this to the list and returns it for further configuration.
Types of the container are used as a default configuration. See <<FileItem,FileItem>>.

***
[[files3add]]
[source,groovy]
void add(Collection<File> files)

:::
Creates new instances of file items from the file list with a types list from the container. All items a added to the list of items.

***
[[files4add]]
[source,groovy]
void add(File file, Action<? super FileItem> action)

:::
Creates an new instance of a file item from the real file and configures this instance. The item is added to the list of items.
Instead of an action it is also possible to use a closure. See <<FileItem,FileItem>>.

***

[[FileItem]]
==== Configuration of FileItem

===== Properties
See also <<itemproperties,'Properties of containers and items'>>.

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description
|<<filename,name>> | The default value is the name without the extension of the configured file. If this property value is changed, the file name can be changed for publishing and deployment.
|<<fileextension,extension>> | The default value is the extension of the configured file. If this property value is changed, the file extension can be changed for publishing and deployment.
|<<filetargetPath,targetPath>> | The target path without the file name of this file artifact.
|<<fileclassifier,classifier>> | This property can be used if this configuration is for a special operating system.
|<<fileupdatable,updatable>> | If this item should not be part of an update installation, this property is set to false.
|===

[[filename]]
[source,groovy]
String name

:::
The default value is the name without the extension of the configured file. If this property value is changed, the file name can be changed for publishing and deployment.
Default:: `*file.nameWithoutExtension*`

***
[[fileextension]]
[source,groovy]
String extension

:::
The default value is the extension of the configured file. If this property value is changed, the file extension can be changed for publishing and deployment.
Default:: `*file.extension*`

***
[[filetargetPath]]
[source,groovy]
String targetPath

:::
The target path without the file name of this file artifact.
Default:: `""`

***
[[fileclassifier]]
[source,groovy]
String classifier

:::
This property can be used if this configuration is for a special operating system.
Default:: `""`

***
[[fileupdatable]]
[source,groovy]
boolean updatable

:::
If this item should not be part of an update installation, this property is set to false.
Default:: `true`

***


[[FileContainerItemContainer]]
=== Container 'containers'

Sometimes it is necessary to configure files of a component together in a package. This configuration contains this kind of file packages.

==== Properties of 'containers'

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<containersitems,items>> | Set of all configured file container items (zip).
|<<containerstargetPath,targetPath>> | A target path for all file containers.
|<<containersupdatable,updatable>> | If an item should not be part of an update installation, this property is set to false.
This property is used for all items and can be overridden by a configuration of the item.
|===

[[containersitems]]
[source,groovy]
Set<FileContainerItem> items

:::
Set of all configured dependencies for module items. See <<FileContainerItem,FileContainerItem>>.
Default:: `[]`

***
[[containerstargetPath]]
[source,groovy]
String targetPath

:::
A target path for all file containers.
Default:: `""`

***
[[containersupdatable]]
[source,groovy]
boolean updatable

:::
If an item should not be part of an update installation, this property is set to false.
This property is used for all items and can be overridden by a configuration of the item.
Default:: `true`

***

==== Methods of 'containers'

[cols="1m,1d" width="100%", options="header"]
|===
|Method | Description

|<<containers1add,add>>(name, type, ...) | Creates an new instance of a file container item with a name and a list of types. It adds this item to the list and returns the instance for further configuration.
|<<containers2add,add>>(name) | Creates an new instance of a file container item with a name, adds this to the list and returns it for further configuration. Types of the container are used as a default configuration.
|<<containers3add,add>>(name,action) | Creates an new instance of a file container item with a name and configures this instance. The item is added to the list of items.
|===

[[containers1add]]
[source,groovy]
FileContainerItem add(String name, String... types)

:::
Creates an new instance of a file container item with a name and a list of types. It adds this item to the list and returns the instance for further configuration.
See <<FileContainerItem,FileContainerItem>>.

***
[[containers2add]]
[source,groovy]
FileContainerItem add(String name)

:::
Creates an new instance of a file container item with a name, adds this to the list and returns it for further configuration.
Types of the container are used as a default configuration. See <<FileContainerItem,FileContainerItem>>.

***
[[containers3add]]
[source,groovy]
void add(name, Action<? super FileContainerItem> action)

:::
Creates an new instance of a file container item with a name and configures this instance. The item is added to the list of items.
Instead of an action it is also possible to use a closure. See <<FileContainerItem,FileContainerItem>>.

***

[[FileContainerItem]]
==== Configuration of FileContainerItem

===== Properties
See also <<itemproperties,'Properties of containers and items'>>.

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<containerbaseName,baseName>> | This is the base name of the package.
|<<containeritemType,itemType>> | This property can be used to add a special type description of a container.
|<<containertargetPath,targetPath>>      | The target path of the file container. This package will be unpacked in this directory.
|<<containertargetIncluded,targetIncluded>> | If the configured target path is part of the component packages, it is necessary to set this property to true.
|<<containersource,source>> | The files to be packed. (read only)
|<<containerclassifier,classifier>> | This property can be used if this configuration is for a special operating system.
|<<containerupdatable,updatable>> | If this item should not be part of an update installation, this property is set to false.
|<<containerexcludes,excludes>>     | Files that matches to one of the patterns will be excluded from the update installation.
|<<containerpreserve,preserve>>     | Pattern set to preserve files during an update installation.
|===

[[containerbaseName]]
[source,groovy]
String baseName

:::
This is the base name of the package.
Default:: `*project.name*`

***
[[containeritemType]]
[source,groovy]
String itemType

:::
This property can be used to add a special type description of a container.
Default:: `""`

***
[[containertargetPath]]
[source,groovy]
String targetPath

:::
The target path of the file container. This package will be unpacked in this directory.
Default:: `""`

***
[[containertargetIncluded]]
[source,groovy]
boolean targetIncluded

:::
If the configured target path is part of the component packages, it is necessary to set this property to true.
Default:: `false`

***
[[containersource]]
[source,groovy]
FileCollection source

:::
The files to be packed. (read only)

***
[[containerclassifier]]
[source,groovy]
String classifier

:::
This property can be used if this configuration is for a special operating system.

***
[[containerupdatable]]
[source,groovy]
boolean updatable

:::
If this item should not be part of an update installation, this property is set to false.
Default:: `true`

***
[[containerexcludes]]
[source,groovy]
Set<String> excludes

:::
Files that matches to one of the patterns will be excluded from the update installation. (*read only*)
Default:: `[]`

***
[[containerpreserve]]
[source,groovy]
PatternFilterable preserve

:::
Pattern set to preserve files during an update installation (*read only*)
Default:: `PaternFilterable` without a configuration

Example::
[source,groovy]
    preserve {
        include 'extraDir/**'
        include 'dir1/**'
        exclude 'dir1/extra.txt'
    }


***

===== Methods
See also <<itemmethods, 'Methods of containers and items'>>.

[cols="1m,1d" width="100%", options="header"]
|===
|Method | Description

|<<source,source>>(Object... paths) | Specifies the source  files for packaging. The given paths are evaluated as per Project.files(java.lang.Object[]).
|<<scontaineraddUpdateExcludePattern,addUpdateExcludePattern>>(pattern) | Adds a pattern to the set of exclude patterns. Files that matches to one of patterns will be excluded from the update installation.
|<<mcontaineraddUpdateExcludePattern,addUpdateExcludePattern>>(patterns) | Adds a set of patterns to the set of exclude patterns. Files that matches to one of patterns will be excluded from the update installation.
|<<macontainerpreserve,preserve>>(action) | Configures the patternset with an action. Files that matches to one of patterns will be preserved during the update installation.
|<<mccontainerpreserve,preserve>>(closure) | Configures the patternset with a closure. Files that matches to one of patterns will be preserved during the update installation.

|===

[[source]]
[source,groovy]
source(Object... paths)

:::
Specifies the source  files for packaging. The given paths are evaluated as per Project.files(java.lang.Object[]).

***
[[scontaineraddUpdateExcludePattern]]
[source,groovy]
boolean addUpdateExcludePattern(String pattern)

:::
Adds a pattern to the set of exclude patterns. Files that matches to one of patterns will be excluded from the update installation.
If the pattern is part of the list, the methodreturns false.

***
[[mcontaineraddUpdateExcludePattern]]
[source,groovy]
boolean addUpdateExcludePattern(Set<String> patterns)

:::
Adds a set of patterns to the set of exclude patterns. Files that matches to one of patterns will be excluded from the update installation.
If one of the patterns is part of the list, the method returns false.

***
[[macontainerpreserve]][[mccontainerpreserve]]
[source,groovy]
preserve(Action<? super PatternFilterable> action)
preserve(Closure closure)

:::
Configures the patternset with an action or closure - depends on the script language. Files that matches to one of patterns will be preserved during the update installation.

Example::
[source,groovy]
    preserve {
        include 'extraDir/**'
        include 'dir1/**'
        exclude 'dir1/extra.txt'
    }

***

[[LinkItemContainer]]
=== Container 'links'

This configuration contains link configuration for Linux and MacOS.

==== Properties of 'links'

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<linksitems,items>> | Set of all configured link items.
|===

[[linksitems]]
[source,groovy]
Set<LinkItem> items

:::
Set of all configured link items. See <<LinkItem,LinkItem>>.
Default:: `[]`

***

==== Methods of 'links'

[cols="1m,1d" width="100%", options="header"]
|===
|Method | Description

|<<links1add,add>>(name,targetPath,type, ...) | Creates an new instance of a link configuration item with a link name, target path and a list of types. It adds this item to the list and returns the instance for further configuration.
|<<links2add,add>>(name,targetPath) | Creates an new instance of a link configuration item with a link name and target path. Types of the container are used as a default configuration.
|<<links3add,add>>(name,targetPath ,action) | Creates an new instance of a link configuration item with a link name and target path and configures this instance. The item is added to the list of items.
|===

[[links1add]]
[source,groovy]
LinkItem add(String name, String targetPath, String... types)

:::
Creates an new instance of a link configuration item with a link name, target path and a list of types. It adds this item to the list and returns the instance for further configuration.
See <<LinkItem,LinkItem>>.

***
[[links2add]]
[source,groovy]
LinkItem add(String name, String targetPath)

:::
Creates an new instance of a link configuration item with a link name and target path. It adds this item to the list and returns the instance for further configuration.
See <<LinkItem,LinkItem>>.

***
[[links3add]]
[source,groovy]
LinkItem add(String name, String targetPath, Action<? super LinkItem> action)

:::
Creates an new instance of a link configuration item with a link name and target path and configures this instance. It adds this item to the list and returns the instance for further configuration.
See <<LinkItem,LinkItem>>.

***

[[LinkItem]]
==== Configuration of LinkItem

===== Properties
See also <<itemproperties,'Properties of containers and items'>>.

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<linkname,name>>                  | The name of the link.
|<<linktargetPath,targetPath>>      | The target of the link.
|<<linkclassifier, classifier>>     | This property can be used if this configuration is for a special operating system.
|<<linkupdatable,updatable>>        | If this item should not be part of an update installation, this property is set to false.
|===

[[linkname]]
[source,groovy]
String name

:::
The name of the link. It must be a valid file system path.
Default:: `""`

***
[[linktargetPath]]
[source,groovy]
String targetPath

:::
The target of the link. This must be also a valid file system path.
Default:: `""`

***
[[linkclassifier]]
[source,groovy]
String classifier

:::
This property can be used if this configuration is for a special operating system.
***

[[linkupdatable]]
[source,groovy]
boolean updatable

:::
If this item should not be part of an update installation, this property is set to false.
Default:: `true`

***

[[DirectoryContainer]]
=== Container 'directories'

This configuration container is used for empty directories.

==== Properties of 'directories'

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<directoriesitems,items>> | Set of all configured directory items.
|===

[[directory]]
[source,groovy]
Set<Directory> items

:::
Set of all configured directory items. See <<Directory,Directory>>.
Default:: `[]`

***

==== Methods of 'directories'

[cols="1m,1d" width="100%", options="header"]
|===
|Method | Description

|<<directories1add,add>>(targetPath, type, ...) | Creates an new instance of a directory configuration item with a target path and a list of types. It adds this item to the list and returns the instance for further configuration.
|<<directories2add,add>>(targetPath) | Creates an new instance of a directory configuration item with a target path. Types of the container are used as a default configuration.
|<<directories3add,add>>(targetPath,action) | Creates an new instance of a directory configuration item with a target path and configures this instance. The item is added to the list of items.
|===

[[directories1add]]
[source,groovy]
Directory add(String targetPath, String... types)

:::
Creates an new instance of a directory item with a target path and a list of types. It adds this item to the list and returns the instance for further configuration.
See <<Directory,Directory>>.

***
[[directories2add]]
[source,groovy]
Directory add(String targetPath)

:::
Creates an new instance of a directory item with a target path. It adds this item to the list and returns the instance for further configuration.
See <<Directory,Directory>>.

***
[[directories3add]]
[source,groovy]
Directory add(String targetPath, Action<? super LinkItem> action)

:::
Creates an new instance of a directory item with a ltarget path and configures this instance. It adds this item to the list and returns the instance for further configuration.
See <<Directory,Directory>>.

***

[[Directory]]
==== Configuration of Directory

===== Properties
See also <<itemproperties,'Properties of containers and items'>>.

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description
|<<directorname,name>>                  | The path of the directory.
|<<directoryclassifier, classifier>>     | This property can be used if this configuration is for a special operating system.
|<<directoryupdatable,updatable>>        | If this item should not be part of an update installation, this property is set to false.
|===

[[directorytargetPath]]
[source,groovy]
String targetPath

:::
This is the directory path. This must be a valid file system path.
Default:: `""`

***
[[directoryclassifier]]
[source,groovy]
String classifier

:::
This property can be used if this configuration is for a special operating system.
***

[[directoryupdatable]]
[source,groovy]
boolean updatable

:::
If this item should not be part of an update installation, this property is set to false.
Default:: `true`

***

===== Methods

[cols="1m,1d" width="100%", options="header"]
|===
|Method | Description

|===

[[PropertyItemContainer]]
=== Container 'propertyItems'

This configuration is used to store properties for installations of a component.

==== Properties of 'propertyItems'

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<propsitems,items>> | Set of all configured property items.
|===

[[propsitems]]
[source,groovy]
Set<PropertyItem> items

:::
Set of all configured property items. See <<PropertyItem,PropertyItem>>.
Default:: `[]`

***

==== Methods of 'propertyItems'

[cols="1m,1d" width="100%", options="header"]
|===
|Method | Description

|<<props1add,add>>(key,value, type, ...) | Creates an new instance of a property configuration item with a property key, a value and a list of types. It adds this item to the list and returns the instance for further configuration.
|<<props2add,add>>(key,value) | Creates an new instance of a property configuration item with a property key and a value. Types of the container are used as a default configuration.
|<<props3add,add>>(key,action) | Creates an new instance of a property configuration item with a property key and configures this instance. The item is added to the list of items.
|===

[[props1add]]
[source,groovy]
PropertyItem add(String key, String value, String... types)

:::
Creates an new instance of a property configuration item with a property key, a value and a list of types. It adds this item to the list and returns the instance for further configuration.
See <<PropertyItem,PropertyItem>>.

***

[[props2add]]
[source,groovy]
PropertyItem add(String key, String value)

:::
Creates an new instance of a property configuration item with a property key and a value. Types of the container are used as a default configuration. See <<PropertyItem,PropertyItem>>.

***

[[props3add]]
[source,groovy]
void add(String name, Action<? super FileContainerItem> action)

:::
Creates an new instance of a property configuration item with a property key and configures this instance. The item is added to the list of items.
Instead of an action it is also possible to use a closure. See <<PropertyItem,PropertyItem>>.

***

[[PropertyItem]]
==== Configuration of PropertyItem

===== Properties
See also <<itemproperties,'Properties of containers and items'>>.

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<value, value>> | The property value of this item.
|<<propclassifier, classifier>> | This property can be used if this configuration is for a special operating system.
|<<propupdatable,updatable>> | If this item should not be part of an update installation, this property is set to false.
|===

[[value]]
[source,groovy]
String value

:::
The property value of this item.
***

[[propclassifier]]
[source,groovy]
String classifier

:::
This property can be used if this configuration is for a special operating system.
***

[[propupdatable]]
[source,groovy]
boolean updatable

:::
If this item should not be part of an update installation, this property is set to false.
Default:: `true`

***

== License

Copyright 2014-2018 Intershop Communications.

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
