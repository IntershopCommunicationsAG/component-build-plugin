= Build Plugin for Components to Install Anywhere
:source-highlighter: pygments
:latestRevision: 1.0.0
:icons: font
:toc:

image:https://travis-ci.org/IntershopCommunicationsAG/component-build-plugin.svg?branch=master["Build Status", link="https://travis-ci.org/IntershopCommunicationsAG/component-build-plugin"]
image:https://api.codacy.com/project/badge/Grade/9d88a63723864ca7bd77e9c05e8d1e48["Codacy code quality", link="https://www.codacy.com/app/IntershopCommunicationsAG/component-build-plugin?utm_source=github.com&utm_medium=referral&utm_content=IntershopCommunicationsAG/component-build-plugin&utm_campaign=Badge_Grade"]

NOTE: This library requires Gradle 4 and JDK 8

NOTE: This library is under development and not final released.


== Summary
This plugin generates a component descriptor, that can be used for deployments on any platforms. It is possible to
add modules (eg Intershop Cartridges), libraries, zip files (container), single files and properties for different
installation and environemnt types and operating systems (classifier). The configuration contains also the installation
target.
There is also an deployment plugin, that used the descriptor for an installation.

== Usage
To apply the component-build Gradle Plugin to your projects, add the following in your build script:

[source,groovy]
[subs=+attributes]
.build.gradle
----
plugins {
    id 'com.intershop.gradle.component.build' version '{latestRevision}'
}

component {
    // component configuration
}
----

== Tasks

[cols="25%,30%,45%", width="100%, options="header"]
|===
|Task name                   | Type                 | Description

|zipContainer<name> | ZipContainerTask     | These tasks create zip container from configured sources.
|verifyClasspath              | VerifyClasspathTask  | For all configured jar files the classpath will be verified for duplicated classes by this task.
|createComponent              | CreateComponentTask  | The main task creates the descriptor file.
|===

The package name of all tasks is `com.intershop.gradle.component.build.tasks`.

== Project Extension 'component'

=== Properties of 'component'

[cols="24%,74%", width="100%, options="header"]
|===
|Property | Description

| <<ivyPublicationName,ivyPublicationName>>     | This property value is used for the name of the used ivy publication.
| <<mavenPublicationName,mavenPublicationName>> | This property value is used for the name of the used maven publication.
| <<displayName,displayName>>                   | The display name is visible for the installation client.
| <<componentDescription,componentDescription>> | This is a more detailed description of this component.
|===

[[ivyPublicationName]]
[source,groovy]
String ivyPublicationName

:::
This property value is used for the name of the used ivy publication.
Default:: `ivyIntershop`

:source-highlighter: prettify

[[mavenPublicationName]]
[source,groovy]
String mavenPublicationName

:::
This property value is used for the name of the used maven publication.
Default:: `mvnIntershop`

[[displayName]]
```java
String displayName
```
:::
The display name is visible for the installation client.
Default:: `*project.name*`

[[componentDescription]]
```java
String componentDescription
```
:::
This is a more detailed description of this component.
Default:: `""`


|*targetPath*           | `String` | `""` | The default target path of the configured component.
|*decriptorOutputFile*  | `File`   | `*project.buildDir*/ +
componentBuild/ +
descriptor/ +
file.component` | The configuration of the output file of createComponent.
|*types* | Set<String> | [] | This is a list of deployment and environement types of the component. (*read only*)
|*libs*              | LibraryItemContainer       | &nbsp; | This is the data container for all libraries. (*read only*)
|*modules*           | ModuleItemContainer        | &nbsp; | This configuration contains all libraries. (*read only*)
|*dependencyMngt*    | DependencyMngtContainer    | &nbsp; | This container holds all dependency related configuration parameters. (*read only*)
|*fileItems*         | FileItemContainer          | &nbsp; | This is the configuration of all single files. (*read only*)
|*containers*        | FileContainerItemContainer | &nbsp; | File containers can be configured in this configuration. (*read only*)
|*propertyItems*     | PropertyItemContainer      | &nbsp; | Properties can be configured in this container. (*read only*)
|===


=== Methods of 'component'

[cols="18%,45%,36%"*, width="95%", options="header"]
|===
|Method     | Parameters | Description

|*addType*  | `String` | Add a deployment or environment type to the list of types. The method returns false, if the new type is already a member of the list.
|*addTypes* | `Collection<String>` | Add a collection of deployment or environment types to the list of types. The method returns false, if the one of the list is already a member of the list.
|*libs*     | `Action<? super LibraryItemContainer>` +
`Closure` | Initialize container for library configuration.
|*modules*          | `Action<? super ModuleItemContainer>` +
`Closure` | Initialize container for modul configuration.
|*dependencyMngt*   | `Action<? super DependencyMngtContainer>` +
`Closure` | Initialize container for dependency management container. This includes also the configuration for the class collision verification.
|*fileItems*        | `Action<? super FileItemContainer>` +
`Closure` | Initialize container for single files.
|*containers*       | `Action<? super FileContainerItemContainer>` +
`Closure` | Initialize container for addtional file item containers.
|*propertyItems*Â    | `Action<? super PropertyItemContainer>` +
`Closure` | Initialize container for properties.
|===

=== Configuration for libs, modules, fileitems and file container

==== Properties of containers and items

[cols="25%,10%,10%,55%", width="95%, options="header"]
|===
|Property | Type | Default value | Description

|*contentType*       | `String`           | `IMMUTABLE` | This setting specifies the handling of the folder / files. +
The following values are allowed: +
*IMMUTABLE* - statischer content will be replaced during the update +
*DATA* - existing files can not be replaced by new files +
*CONFIGURATION* - configuration files will be changed during the configuration +
*UNSPECIFIED* - not specified content
|*types*             | `Set<String>`      | `[]`   | This is a list of deployment and environement types of the component. (*read only*) +
It is used for all items.
|===

==== Methods of containers and items

[cols="10%,38%,52%"*, width="95%", options="header"]
|===
|Method     | Parameters | Description

|*setTypes* | `Collection<String>` | Set a collection of deployment or environment types to the list of types.
|*addType*  | `String` | Add a deployment or environment type to the list of types. The method returns false, if the new type is already a member of the list.
|*addTypes* | `Collection<String>` | Add a collection of deployment or environment types to the list of types. The method returns false, if the one of the list is already a member of the list.
|===

=== Container 'libs'

This configuration contains the library configuration of a components. A library is a Maven dependency that includes one jar file.

==== Properties of 'libs'

[cols="25%,10%,10%,55%", width="95%, options="header"]
|===
|Property | Type | Default value | Description

|*items*             | `Set<LibraryItem>` | `[]`   | Set of all configured dependencies for library items.
|*resolveTransitive* | `boolean`          | `true` | If this value is true, dependencies will be resolved transitive.
|*targetPath*        | `String`           | `""`   | A target path for all libraries.
|===

==== Methods of 'libs'

[cols="10%,38%,52%"*, width="95%", options="header"]
|===
|Method     | Parameters | Description

|*add* | `Object`, `String...` | Creates an new instance of a library item with the dependency from the object and a list of types. It adds this item to the list and returns the instance for further configuration.
|*add* | `Object` | Creates an new instance of a library item with the dependency from the object, adds this to the list and returns it for further configuration. Types of the container are used as a default configuration.
|*add* | `Collection<Object>` | Creates new instances of library items from the object list with a types list from the container. All items a added to the list of items.
|*add* | `Object`, `Action<? super LibraryItem>` | Creates an new instance of a library item with the dependency from the object and configures this instance. The item is added to the list of items.
|*add* | `Object`, `Closure` | Creates an new instance of a library item with the dependency from the object and configures this instance. The item is added to the list of items.
|===

==== Configuration of LibraryItem

===== Properties

[cols="25%,10%,10%,55%", width="95%, options="header"]
|===
|Property | Type | Default value | Description

|*dependency*        | `DependencyConfig` | &nbsp; | The dependency configuration of this library.
|*resolveTransitive* | `boolean`          | `true` | If this value is true, the dependency will be resolved transitive.
|*targetName*        | `String`           | `""`   | The target name of this library artifact. The default configuration is `$group_$name_$version`.
|===

=== Container 'modules'

This configuration contains the module configuration of a components. A module is an Ivy dependency that includes different files. In future releases this will replaced and an own
descriptor will be used.

==== Properties of 'modules'

[cols="25%,10%,10%,55%", width="95%, options="header"]
|===
|Property | Type | Default value | Description

|*items*             | `Set<ModuleItem>` | `[]`   | Set of all configured dependencies for module items.
|*resolveTransitive* | `boolean`          | `true` | If this value is true, dependencies will be resolved transitive.
|*targetPath*        | `String`           | `""`   | A target path for all modules.
|===

==== Methods of 'modules'

[cols="10%,38%,52%"*, width="95%", options="header"]
|===
|Method     | Parameters | Description

|*add* | `Object`, `String...` | Creates an new instance of a module item with the dependency from the object and a list of types. It adds this item to the list and returns the instance for further configuration.
|*add* | `Object` | Creates an new instance of a library item with the dependency from the object, adds this to the list and returns it for further configuration. Types of the container are used as a default configuration.
|*add* | `Collection<Object>` | Creates new instances of library items from the object list with a types list from the container. All items a added to the list of items.
|*add* | `Object`, `Action<? super ModuleItem>` | Creates an new instance of a module item with the dependency from the object and configures this instance. The item is added to the list of items.
|*add* | `Object`, `Closure` | Creates an new instance of a library item with the dependency from the object and configures this instance. The item is added to the list of items.
|===

==== Configuration of ModuleItem

===== Properties

[cols="25%,10%,10%,55%", width="95%, options="header"]
|===
|Property | Type | Default value | Description

|*dependency*        | `DependencyConfig` | &nbsp; | The dependency configuration of this library.
|*resolveTransitive* | `boolean`          | `true` | If this value is true, the dependency will be resolved transitive.
|*targetPath*        | `String`           | `""`   | The target path of this module artifact.
|*targetIncluded*    | `boolean`          | `false` | If the configured target path is part of the component packages, it is necessary to set this property to true.
|===

=== Container 'dependencyMngt'

This configuration contains all dependency related configuration.

==== Properties of 'dependencyMngt'

[cols="25%,10%,10%,55%", width="95%, options="header"]
|===
|Property | Type | Default value | Description

|*excludes*       | `Set<DependencyConfig>`   | `[]` | Set of excludes patterns, eg 'com.test.*' excludes all dependencies with com.test in groups.
|*classpathVerification* | `ClasspathVerificationContainer` | &nbsp; | The configuration for classpath verification.
|===

==== Methods of 'dependencyMngt'

[cols="10%,38%,52%"*, width="95%", options="header"]
|===
|Method     | Parameters | Description

|*exclude*Â | `String`, `String`, `String` | With this method it is possible to add an pattern with a group or organization, a name and a version.
It is possible to configure only a group and a name pattern or only a group pattern.
|*classpathVerification* | `Action<? super ClasspathVerificationContainer>` +
`Closure` | Initialize container for classpath verification (check for class collisions).
|===

==== Configuration of 'classpathVerification'

===== Properties

[cols="25%,10%,10%,55%", width="95%, options="header"]
|===
|Property | Type | Default value | Description

|*enabled*  | `boolean` | `true` | For disabling classpath verification set this property to false.
|*excludes* | `Set<DependencyConfig>` | `[]` | Set of excludes patterns, eg 'com.test.*' excludes all dependencies with com.test in groups from class path verification.
|*excludedClasses* | `Set<String>` | `[]` | Set of patterns to exclude special classes from verification.
|===

===== Methods

[cols="10%,38%,52%"*, width="95%", options="header"]
|===
|Method     | Parameters | Description

|*exclude*Â | `String`, `String`, `String` | With this method it is possible to add an pattern with a group or organization, a name and a version.
It is possible to configure only a group and a name pattern or only a group pattern.
|*excludeClass* | `String` | Adds a pattern for classes, to remove these classes from verification.
|===

=== Container 'fileItems'

This is the configuration of single files.

==== Properties of 'fileItems'

[cols="25%,10%,10%,55%", width="90%, options="header"]
|===
|Property | Type | Default value | Description

|*items*             | `Set<FileItem>` | `[]`   | Set of all configured file items.
|*targetPath*        | `String`           | `""`   | A target path for all files.
|===

==== Methods of 'fileItems'

[cols="10%,38%,52%"*, width="95%", options="header"]
|===
|Method     | Parameters | Description

|*add* | `File`, `String...` | Creates an new instance of a file item with the real file and a list of types. It adds this item to the list and returns the instance for further configuration.
|*add* | `File` | Creates an new instance of a file item with the real file, adds this to the list and returns it for further configuration. Types of the container are used as a default configuration.
|*add* | `Collection<File>` | Creates new instances of file items from the file list with a types list from the container. All items a added to the list of items.
|*add* | `File`, `Action<? super FileItem>` | Creates an new instance of a file item from the real file and configures this instance. The item is added to the list of items.
|*add* | `File`, `Closure` | Creates an new instance of a file item from the real file and configures this instance. The item is added to the list of items.
|===

==== Configuration of FileItem

===== Properties

[cols="25%,10%,10%,55%", width="95%, options="header"]
|===
|Property | Type | Default value | Description

|*name*        | `String` | file name  | The default value is the name without the extension of the configured file. If this property value is changed, the file name can be changed for publishing and deployment.
|*extension*  | `String` | file extension | The default value is the extension of the configured file. If this property value is changed, the file extension can be changed for publishing and deployment.
|*targetPath* | `String`  | `""`   | The target path without the file name of this file artifact.
|*classifier* | `String` |Â "" | This property can be used if this configuration is for a special operating system.
|===

=== Container 'containers'

Sometimes it is necessary to configure files of a component together in a package. This configuration contains this kind of configuration.

==== Properties of 'containers'

[cols="25%,10%,10%,55%", width="90%, options="header"]
|===
|Property | Type | Default value | Description

|*items*             | `Set<FileContainerItem>` | `[]`   | Set of all configured file container items (zip).
|*targetPath*        | `String`           | `""`   | A target path for all files.
|===

==== Methods of 'containers'

[cols="10%,38%,52%"*, width="95%", options="header"]
|===
|Method     | Parameters | Description

|*add* | `String`, `String...` | Creates an new instance of a file container item with a name and a list of types. It adds this item to the list and returns the instance for further configuration.
|*add* | `String` | Creates an new instance of a file container item with a name, adds this to the list and returns it for further configuration. Types of the container are used as a default configuration.
|*add* | `String`, `Action<? super FileContainerItem>` | Creates an new instance of a file container item with a name and configures this instance. The item is added to the list of items.
|*add* | `String`, `Closure` | Creates an new instance of a file container item with a name and configures this instance. The item is added to the list of items.
|===

==== Configuration of FileContainerItem

===== Properties

[cols="25%,10%,10%,55%", width="95%, options="header"]
|===
|Property | Type | Default value | Description

|*containerType*        | `String` | ""  |
|*baseName*  | `String` | `projet.name` |
|*targetPath* | `String`  | `""`   | The target path without the file name of this file artifact.
|*targetIncluded* | `boolean` | `false` | If the configured target path is part of the package, it is necessary to set this property to true.
|*source* | FileCollection | [] | The files to be packed. (read only)
|*classifier* | `String` |Â "" | This property can be used if this configuration is for a special operating system.
|===

===== Methods

[cols="10%,38%,52%"*, width="95%", options="header"]
|===
|Method     | Parameters | Description

|*source* | `Object...` | Specifies the source  files for packaging. The given paths are evaluated as per Project.files(java.lang.Object[]).
|===

=== Container 'propertyItems'

==== Properties of 'propertyItems'

[cols="25%,10%,10%,55%", width="90%, options="header"]
|===
|Property | Type | Default value | Description

|*items*             | `Set<PropertyItem>` | `[]`   | Set of all configured property items.
|*types*             | `Set<String>`      | `[]`   | This is a list of deployment and environement types of the component. (*read only*)  +
It is used for all items.
|===

==== Methods of 'propertyItems'

[cols="10%,38%,52%"*, width="95%", options="header"]
|===
|Method     | Parameters | Description

|*add* | `String`, `String`, `String...` | Creates an new instance of a property configuration item with a property key, a value and a list of types. It adds this item to the list and returns the instance for further configuration.
|*add* | `String`, `String` | Creates an new instance of a property configuration item with a property key and a value. Types of the container are used as a default configuration.
|*add* | `String`, `Action<? super PropertyItem>` | Creates an new instance of a property configuration item with a property key and configures this instance. The item is added to the list of items.
|*add* | `String`, `Closure` | Creates an new instance of a property configuration item with a property key and configures this instance. The item is added to the list of items.
|===

==== Configuration of FileContainerItem

===== Properties

[cols="25%,10%,10%,55%", width="95%, options="header"]
|===
|Property | Type | Default value | Description

|*value* | `String` | "" | The property value of this item.
|*classifier* | `String` |Â "" | This property can be used if this configuration is for a special operating system.
|===

== License

Copyright 2014-2018 Intershop Communications.

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
